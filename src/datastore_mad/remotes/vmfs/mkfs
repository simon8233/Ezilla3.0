#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2014, OpenNebula Project (OpenNebula.org), C12G Labs        #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

# ------------------------------------------------------------------------------
#  Set up Environment and transfer arguments
# ------------------------------------------------------------------------------
#
#  vmfs.conf: includes default TMP_DIR
#  libfs.sh a& scripts_common.sh: includes tools and lib calls
# ------------------------------------------------------------------------------

if [ -z "${ONE_LOCATION}" ]; then
    LIB_LOCATION=/usr/lib/one
    VMWARERC=/etc/one/vmwarerc
else
    LIB_LOCATION=$ONE_LOCATION/lib
    VMWARERC=$ONE_LOCATION/etc/vmwarerc
fi

. $LIB_LOCATION/sh/scripts_common.sh

DRIVER_PATH=$(dirname $0)
source ${DRIVER_PATH}/../libfs.sh
source ${DRIVER_PATH}/vmfs.conf

# -------- Get mkfs and datastore arguments from OpenNebula core ------------

DRV_ACTION=$1
ID=$2

XPATH="${DRIVER_PATH}/../xpath.rb -b $DRV_ACTION"

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <($XPATH     /DS_DRIVER_ACTION_DATA/DATASTORE/BASE_PATH \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/RESTRICTED_DIRS \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/SAFE_DIRS \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/BRIDGE_LIST \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/ID \
                    /DS_DRIVER_ACTION_DATA/IMAGE/FSTYPE \
                    /DS_DRIVER_ACTION_DATA/IMAGE/SIZE)

BASE_PATH="${XPATH_ELEMENTS[j++]}"
RESTRICTED_DIRS="${XPATH_ELEMENTS[j++]}"
SAFE_DIRS="${XPATH_ELEMENTS[j++]}"
BRIDGE_LIST="${XPATH_ELEMENTS[j++]}"
DS_ID="${XPATH_ELEMENTS[j++]}"
FSTYPE="${XPATH_ELEMENTS[j++]}"
SIZE="${XPATH_ELEMENTS[j++]}"

# ------------------------------------------------------------------------------
#  Set up datastore
# ------------------------------------------------------------------------------
#
#  DST is the final generated image SOURCE, e.g. /vmfs/volumes/104/834efd1/
#  DST_FOLDER is the image folder name, e.g. 834efd1
#  DST_HOST is the host to make the transfers (from BRIDGE_LIST)
# ------------------------------------------------------------------------------

DST=`generate_image_path`
DST_FOLDER=`basename $DST`
DST_HOST=`get_destination_host $ID`

if [ -z "$DST_HOST" ]; then
    error_message "Datastore template missing 'BRIDGE_LIST' attribute."
    exit -1
fi

set_up_datastore "$BASE_PATH" "$RESTRICTED_DIRS" "$SAFE_DIRS"

# ------------------------------------------------------------------------------
# Create image folder and set image size and attributes
# ------------------------------------------------------------------------------

exec_and_log "ssh_make_path $DST_HOST $DST" "Cannot create $DST in $DST_HOST"

IMAGE_FORMAT=vmdk
VMWARE_DISK_TYPE=`echo $FSTYPE|cut -d'_' -f 2`

echo "$VMWARE_DISK_TYPE" | \
    grep '\<thin\>\|\<zeroedthic\>\|\<eagerzeroedthick\>' 2>&1 /dev/null

if [ $? -eq 1 ] ; then
    VMWARE_DISK_TYPE="thin"
fi

# ------------------------------------------------------------------------------
# Create the image within the datastore
# ------------------------------------------------------------------------------

if [ "$FSTYPE" = "save_as" ]; then
    echo "$DST"
    exit 0
fi

log "Making raw filesystem of ${SIZE}M at $DST on $DST_HOST"

ssh_exec_and_log $DST_HOST \
              "$VMKFSTOOLS -c ${SIZE}M -d ${VMWARE_DISK_TYPE} $DST/disk.vmdk" \
              "Cannot create $DST/disk.vmdk on $DST_HOST"

# ------------------------------------------------------------------------------
#  Send SOURCE to OpenNebula core
# ------------------------------------------------------------------------------

echo "$DST"
